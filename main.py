import requests
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackQueryHandler
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler
)


# –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–æ–±–ª—é–¥–∞–π—Ç–µ –∫–æ–ø–∏—Ä–∞–π—Ç –∏ –Ω–µ —É–¥–∞–ª—è–π—Ç–µ –Ω–∏—á–µ–≥–æ.
# –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –ö—É—Ä–∫–æ–≤ –ê–ª–µ–∫—Å–µ–π. –í–µ—Ä—Å–∏—è 0.0.9 –Ω–∞ –º–æ–º–µ–Ω—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
# –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –∏–∑–º–µ–Ω—è—Ç—å —Ç–æ–∫–µ–Ω—ã –ø–µ—Ä–µ–¥ —Å–ª–æ–≤–æ–º Bearer (—Å–∞–º–æ bearer –Ω–µ —Ç—Ä–æ–≥–∞—Ç—å!!!)
# –∞ —Ç–∞–∫ –∂–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ —Ç–µ–ª–µ–≥—Ä–∞–º :) —Å–ø–∞—Å–∏–±–æ!!!

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update, context):
    keyboard = [
        [InlineKeyboardButton("–°—Ç–∞—Ç—É—Å –ü–ö", callback_data='info')],
        [InlineKeyboardButton("–ú–∞–≥–∞–∑–∏–Ω –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data='magazin')],
        [InlineKeyboardButton("–î–µ–Ω—å–≥–∏ –Ω–∞ –¥–µ–ø–æ–∑–∏—Ç–∞—Ö", callback_data='deposit')],
        [InlineKeyboardButton("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ —Å–º–µ–Ω—É", callback_data='smena')],
        [InlineKeyboardButton("F.A.Q", callback_data='faq')],

    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('üëã –ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ –±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é , –Ω–∞–ø–∏—à–∏—Ç–µ /start . –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: –ê–ª–µ–∫—Å–µ–π –ö—É—Ä–∫–æ–≤. –í–µ—Ä—Å–∏—è: 0.0.9', reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É
async def button(update, context):
    query = update.callback_query

    if query.data == 'info':
        url = 'https://billing.smartshell.gg/api/graphql'
        headers = {
            'Authorization': 'Bearer –í–ê–®_–¢–û–ö–ï–ù',
            'Content-Type': 'application/json'
        }
        body = """query Hosts {
    hosts {
        id
        group_id
        type_id
        position
        alias
        comment
        mac_addr
        ip_addr
        dns_name
        coord_x
        coord_y
        is_deleted
        in_service
        created_at
        shell_mode
        last_online
        online
        device_has_changed
        device_updated_at
        locked
        admin_called_at
    }
}
        """


        response = requests.post(url, headers=headers, json={"query": body})
        print(response.status_code)
        
        data = response.json()
        print(data)
        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        text = "=================================\n"
        for el in data["data"]["hosts"]:

            text += f"""ID: {el["id"]}
–ú–µ—Å—Ç–æ: {el["position"]}
–ù–∞–∑–≤–∞–Ω–∏–µ: {el["alias"]}
–î–ù–°: {el["dns_name"]}
–°–æ—Å—Ç–æ—è–Ω–∏–µ: {el["online"]}
=================================
"""
        print(text)
        await query.edit_message_text(text)

    if query.data == 'magazin':
        url = 'https://billing.smartshell.gg/api/graphql'
        headers = {
            'Authorization': 'Bearer –í–ê–®_–¢–û–ö–ï–ù',
            'Content-Type': 'application/json'
        }
        body = """query Goods {
    goods {
        id
        title
        subtitle
        comment
        cost
        wholesale_cost
        tax_percent
        unit_name
        unit_value
        amount
        image
        use_global_discounts
        created_at
        tax_system
        vat
        ean
        use_fair_sign
        is_excise
    }
}
        """


        response = requests.post(url, headers=headers, json={"query": body})
        print(response.status_code)
       
        data = response.json()
        print(data)
        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        text = "=================================\n"
        for el in data["data"]["goods"]:

            await context.bot.send_message(chat_id=query.message.chat_id,
                                     text = f"""ID —Ç–æ–≤–∞—Ä–∞: {el["id"]}
–ù–∞–∑–≤–∞–Ω–∏–µ: {el["title"]}
–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: {el["cost"]}
–¶–µ–Ω–∞ –∑–∞–∫—É–ø–∫–∏: {el["wholesale_cost"]}
–ù–∞–ª–∏—á–∏–µ: {el["amount"]}
=================================
""")
        print(text)
        #await query.answer(data["data"]["goods"][0]["id"])

    if query.data == 'deposit':
        url = 'https://billing.smartshell.gg/api/graphql'
        headers = {
            'Authorization': 'Bearer –í–ê–®_–¢–û–ö–ï–ù',
            'Content-Type': 'application/json'
        }
        body = """query Clients {
    clients {
        total_deposits
    }
}
        """


        response = requests.post(url, headers=headers, json={"query": body})
        print(response.status_code)

        data = response.json()
        print(data)
        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é

        text = f"–û–±—â–∞—è —Å—É–º–º–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å–∞—Ö: {data['data']['clients']['total_deposits']}"

        print(text)
        await query.edit_message_text(text)

    if query.data == 'smena':
        url = 'https://billing.smartshell.gg/api/graphql'
        headers = {
            'Authorization': 'Bearer –í–ê–®_–¢–û–ö–ï–ù',
            'Content-Type': 'application/json'
        }
        body = """query ActiveWorkShift {
    activeWorkShift {
        id
        comment
        created_at
        finished_at
        worker {
            uuid
            login
            nickname
            phone
            email
            phone_suffix
            dob
            country_code
            first_name
            last_name
            middle_name
        }
        payments {
            sum
        }
    }
}
        """


        response = requests.post(url, headers=headers, json={"query": body})
        print(response.status_code)

        print(data)
        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        text = f"–ò–º—è: {data['data']['activeWorkShift']['worker']['first_name']}"
        text_2 = f"–ó–∞—Ä–∞–±–æ—Ç–æ–∫ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {data['data']['activeWorkShift']['payments'][0]['sum']} ‚ÇΩ"
        text_3 = f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {data['data']['activeWorkShift']['worker']['phone']}"
        text_4 = f"–û—Ç–∫—Ä—ã–ª —Å–º–µ–Ω—É: {data['data']['activeWorkShift']['created_at']}"


        print(text)
        await context.bot.send_message(chat_id=query.message.chat_id, text=text)
        await context.bot.send_message(chat_id=query.message.chat_id, text=text_2)
        await context.bot.send_message(chat_id=query.message.chat_id, text=text_3)
        await context.bot.send_message(chat_id=query.message.chat_id, text=text_4)
        await context.bot.send_message(chat_id=query.message.chat_id, text=text_5)


    if query.data == 'faq':

        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        text = "===========FAQ============"
        text_2 = "–°—Ç–∞—Ç—É—Å –ø–∫ -  –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é ID , –ú–ï–°–¢–û, –ù–ê–ó–í–ê–ù–ò–ï , –°–û–°–¢–û–Ø–ù–ò–ï. –ì–¥–µ ID —ç—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –ü–ö, –ú–µ—Å—Ç–æ –∏ –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–∫–æ–π –∫–æ–º–ø—å—é—Ç–µ—Ä –ø–æ —Å—á–µ—Ç—É –∏ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤  WINDOWS, –°–æ—Å—Ç–æ—è–Ω–∏–µ: TRUE or False (–í–∫—é—á–µ–Ω –∏–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω) –ü–æ –∂–µ–ª–∞–Ω–∏—é –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —é–∑–µ—Ä–∞ –∫–æ—Ç–æ—Ä—ã–π —Å–∏–¥–∏—Ç –∑–∞ –ø–∫ (–µ—Å–ª–∏ —Ç–∞–∫–æ–π –µ—Å—Ç—å)"
        text_3 = "–ú–∞–≥–∞–∑–∏–Ω –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞–º ID , –ù–∞–∑–≤–∞–Ω–∏–µ , –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ , –¶–µ–Ω–∞ –∑–∞–∫—É–ø–∫–∏ , –ù–∞–ª–∏—á–∏–µ."
        text_4 = "–î–µ–Ω—å–≥–∏ –Ω–∞ –¥–µ–ø–æ–∑–∏—Ç–∞—Ö - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â—É—é —Å—É–º–º—É –∫–æ—Ç–æ—Ä–∞—è –Ω–∞ –±–∞–ª–∞–Ω—Å–∞—Ö —é–∑–µ—Ä–æ–≤ (–∫–ª–∏–µ–Ω—Ç–æ–≤)"
        text_5 = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ —Å–º–µ–Ω—É –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞–º - –ò–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–∞ —Å–º–µ–Ω–µ, –ó–∞—Ä–∞–±–æ—Ç–æ–∫ –Ω–∞ —Å–º–µ–Ω—É , –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –î–∞—Ç–∞/–í—Ä–µ–º—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã"



        print(text)
        await context.bot.send_message(chat_id=query.message.chat_id, text=text)
        await context.bot.send_message(chat_id=query.message.chat_id, text=text_2)
        await context.bot.send_message(chat_id=query.message.chat_id, text=text_3)
        await context.bot.send_message(chat_id=query.message.chat_id, text=text_4)
        await context.bot.send_message(chat_id=query.message.chat_id, text=text_5)

def main():

    # –î–û–°–¢–£–ü –ë–û–¢–ê :) –ù–ï –ó–ê–ë–´–í–ê–ï–ú –í–°–¢–ê–í–õ–Ø–¢–¨ –¢–û–ö–ï–ù
    application = Application.builder().token("–í–ê–®_–¢–û–ö–ï–ù").build()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button))
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()