from aiogram import Dispatcher, Bot, types, executor

import requests

# –í–≤–µ–¥–∏—Ç–µ –≤ —Å—Ç—Ä–æ—á–∫—É token - api –±–æ—Ç–∞ (@botfather)
bot = Bot(token="TOKEN")
dp = Dispatcher(bot=bot)

# –¢–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ —Ç—É—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å Bearer-Token (–ø–æ—Å–ª–µ Bearer –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω)
BEARER_TOKEN = "Bearer TOKEN"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands="start")
async def cmd_start(message: types.Message):
    keyboard = types.InlineKeyboardMarkup()

    keyboard.add(
        types.InlineKeyboardButton(
            text="üñ• –ü–ö", callback_data="info"
        )
    )

    keyboard.add(
        types.InlineKeyboardButton(
            text="üõí –ú–∞–≥–∞–∑–∏–Ω", callback_data="magazin"
        )
    )

    keyboard.add(
        types.InlineKeyboardButton(
            text="üí∏ –û–±—â–∏–µ –¥–µ–ø–æ–∑–∏—Ç—ã", callback_data="deposit"
        )
    )

    keyboard.add(
        types.InlineKeyboardButton(
            text="üë®‚Äçüíª –°–º–µ–Ω–∞", callback_data="smena"
        )
    )

    keyboard.add(
        types.InlineKeyboardButton(
            text="‚Ñπ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="faq"
        )
    )

    # –û—Ç–≤–µ—á–∞–µ–º
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –ø—É–Ω–∫—Ç, –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω—É–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. @kurkoffproject // –í–µ—Ä—Å–∏—è 0.1.9 –ö–ª—É–±: FREE CLUB",
                         reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
@dp.callback_query_handler()
async def give_info(callback: types.CallbackQuery):
    # –∫–ª–∞–≤–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ú–µ–Ω—é"
    key_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
    key_menu.add("–ú–µ–Ω—é")
    await callback.answer()

    if callback.data == 'info':
        url = 'https://billing.smartshell.gg/api/graphql'
        headers = {
            'Authorization': BEARER_TOKEN,
            'Content-Type': 'application/json'
        }
        body = """query Hosts {
    hosts {
        id
        group_id
        type_id
        position
        alias
        comment
        mac_addr
        ip_addr
        dns_name
        coord_x
        coord_y
        is_deleted
        in_service
        created_at
        shell_mode
        last_online
        online
        device_has_changed
        device_updated_at
        locked
        admin_called_at
        client_sessions {
            id
            duration
            elapsed
            total_cost
            status
            created_at
            started_at
            finished_at
            canceled_at
            client {
                nickname
            }
        }
    }
}"""

        response = requests.post(url, headers=headers, json={"query": body})
        print(response.status_code)

        data = response.json()
        print(data)
        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        text = "=================================\n"
        for el in data["data"]["hosts"]:
            print(el)
            text += f"""üÜîID: {el["id"]}
üñ•–ú–µ—Å—Ç–æ: {el["position"]}
üìù–ù–∞–∑–≤–∞–Ω–∏–µ: {el["alias"]}
üñ•–î–ù–°: {el["dns_name"]}
üü©/üü•–°–æ—Å—Ç–æ—è–Ω–∏–µ: {el["online"]}
üë®‚Äçüíª–Æ–∑–µ—Ä –∑–∞ –ü–ö: {"–ù–µ—Ç" if len(el["client_sessions"]) == 0 else "–î–∞"}
‚è∞–ó–∞–≤–µ—Ä–µ—à–Ω–∏–µ —Å–µ–∞–Ω—Å–∞: {el["client_sessions"][0]["finished_at"] if len(el["client_sessions"]) != 0 else "–ù–µ—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"}
    =================================
    """
        print(text)

        await callback.message.answer(text,
                                      reply_markup=key_menu)

    elif callback.data == 'magazin':
        url = 'https://billing.smartshell.gg/api/graphql'
        headers = {
            'Authorization': BEARER_TOKEN,
            'Content-Type': 'application/json'
        }
        body = """query Goods {
        goods {
            id
            title
            subtitle
            comment
            cost
            wholesale_cost
            tax_percent
            unit_name
            unit_value
            amount
            image
            use_global_discounts
            created_at
            tax_system
            vat
            ean
            use_fair_sign
            is_excise
        }
    }
            """

        response = requests.post(url, headers=headers, json={"query": body})
        print(response.status_code)

        data = response.json()
        print(data)
        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        text = "=================================\n"
        for el in data["data"]["goods"]:
            await callback.message.answer(text=f"""üÜîID: {el["id"]}
üìù–ù–∞–∑–≤–∞–Ω–∏–µ: {el["title"]}
üü©–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: {el["cost"]} ‚ÇΩ
üü•–¶–µ–Ω–∞ –∑–∞–∫—É–ø–∫–∏: {el["wholesale_cost"]} ‚ÇΩ
üü¶–ù–∞–ª–∏—á–∏–µ: {el["amount"]} –®–¢
    =================================
    """)
        # print(text)


    elif callback.data == 'deposit':
        url = 'https://billing.smartshell.gg/api/graphql'
        headers = {
            'Authorization': BEARER_TOKEN,
            'Content-Type': 'application/json'
        }
        body = """query Clients {
        clients {
            total_deposits
        }
    }
            """

        response = requests.post(url, headers=headers, json={"query": body})
        print(response.status_code)

        data = response.json()
        print(data)
        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é

        text = f"–û–±—â–∞—è —Å—É–º–º–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å–∞—Ö: {data['data']['clients']['total_deposits']} ‚ÇΩ"

        print(text)
        await callback.message.answer(text,
                                      reply_markup=key_menu)

    elif callback.data == 'smena':
        url = 'https://billing.smartshell.gg/api/graphql'
        headers = {
            'Authorization': BEARER_TOKEN,
            'Content-Type': 'application/json'
        }
        body = """query ActiveWorkShift {
        activeWorkShift {
            id
            comment
            created_at
            finished_at
            worker {
                uuid
                login
                nickname
                phone
                email
                phone_suffix
                dob
                country_code
                first_name
                last_name
                middle_name
            }
            payments {
                sum
            }
        }
    }
            """
        body_2 = """query Hosts {
    activeWorkShift {
        id
        comment
        created_at
        finished_at
        money {
            sum {
                cash
                card
                total
            }
        }
    }
}"""
        response = requests.post(url, headers=headers, json={"query": body})
        response_2 = requests.post(url, headers=headers, json={"query": body_2})
        data = response.json()
        data_work = response_2.json()
        print(response.status_code)

        print(data)
        print(data_work)
        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        text = f"""üßë‚Äçüíª–ò–º—è:{data['data']['activeWorkShift']['worker']['first_name']}
üßë‚Äçüíª–§–∞–º–∏–ª–∏—è: {data['data']['activeWorkShift']['worker']['last_name']}
üì≤–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:{data['data']['activeWorkShift']['worker']['phone']}
‚è∞–û—Ç–∫—Ä—ã–ª —Å–º–µ–Ω—É: {data['data']['activeWorkShift']['created_at']}
üí∞–ó–∞—Ä–∞–±–æ—Ç–æ–∫ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {data_work["data"]["activeWorkShift"]["money"]["sum"]["total"]} ‚ÇΩ
üí∏–ù–∞–ª–∏—á–Ω—ã–µ: {data_work["data"]["activeWorkShift"]["money"]["sum"]["cash"]} ‚ÇΩ
üí∞–ë–µ–∑–Ω–∞–ª–∏—á–Ω—ã–µ: {data_work["data"]["activeWorkShift"]["money"]["sum"]["card"]} ‚ÇΩ

        """

        print(text)
        await callback.message.answer(text,
                                      reply_markup=key_menu)

    if callback.data == 'faq':
        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        text = """===========<b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞</b>============
    <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞ - @kurkoffproject</b>
        """

        print(text)
        await callback.message.answer(text,
                                      reply_markup=key_menu,
                                      parse_mode="HTML")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–µ–Ω—é"
@dp.message_handler(text="–ú–µ–Ω—é")
async def cmd_menu(message: types.Message):
    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Ç–æ–º
    keyboard = types.InlineKeyboardMarkup()

    keyboard.add(
        types.InlineKeyboardButton(
            text="üñ• –ü–ö", callback_data="info"
        )
    )

    keyboard.add(
        types.InlineKeyboardButton(
            text="üõí –ú–∞–≥–∞–∑–∏–Ω", callback_data="magazin"
        )
    )

    keyboard.add(
        types.InlineKeyboardButton(
            text="üí∏ –û–±—â–∏–µ –¥–µ–ø–æ–∑–∏—Ç—ã", callback_data="deposit"
        )
    )

    keyboard.add(
        types.InlineKeyboardButton(
            text="üë®‚Äçüíª –°–º–µ–Ω–∞", callback_data="smena"
        )
    )

    keyboard.add(
        types.InlineKeyboardButton(
            text="–ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="faq"
        )
    )

    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –ø—É–Ω–∫—Ç, –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω—É–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.\n@kurkoffproject // –í–µ—Ä—Å–∏—è 0.1.9 –ö–ª—É–±: FREE CLUB",
                         reply_markup=keyboard, parse_mode="HTML")


if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    executor.start_polling(dispatcher=dp, skip_updates=True)
